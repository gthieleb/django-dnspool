# Generated by Django 2.2 on 2019-04-27 16:39

from django.db import migrations, models
import django.db.models.deletion
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DnsEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('address', models.GenericIPAddressField(help_text='The ip address of the name entry', verbose_name='IP-Address')),
            ],
            options={
                'verbose_name_plural': 'Dns Entries',
            },
        ),
        migrations.CreateModel(
            name='DnsNameComponentCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(help_text='The component category of the name', max_length=50)),
                ('default', models.CharField(blank=True, help_text='The default value for category', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='DnsNameVariation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('variation', models.CharField(help_text="Concat the naming variation using python format expression e.g ''{type}{farm}foo'", max_length=150, verbose_name='DNS Name Variation')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
            ],
        ),
        migrations.CreateModel(
            name='Middleware',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
            ],
        ),
        migrations.CreateModel(
            name='SubnetParent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subnet_parents', to='app.SubnetParent', verbose_name='Subnet-Parent')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Subnet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cidr', models.CharField(max_length=50, verbose_name='Name')),
                ('admin', models.BooleanField(default=False, help_text='Does policy allow to use this subnet for administrative purpose', verbose_name='Admin Subnet')),
                ('middlewares', models.ManyToManyField(blank=True, help_text='Middlewares configured for this subnet', to='app.Middleware', verbose_name='Middlewares')),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subnets', to='app.SubnetParent', verbose_name='Subnet-Parent')),
            ],
        ),
        migrations.CreateModel(
            name='DnsPoolEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('entries', models.ManyToManyField(blank=True, to='app.DnsEntry', verbose_name='Dns-Entries')),
            ],
            options={
                'verbose_name_plural': 'Dns PoolEntries',
            },
        ),
        migrations.CreateModel(
            name='DnsNamePattern',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('regex', models.TextField(verbose_name='DNS Entry Name Pattern')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('variations', models.ManyToManyField(help_text='Ordered list of dns name variations', to='app.DnsNameVariation', verbose_name='Dns Name Variations')),
            ],
        ),
        migrations.CreateModel(
            name='DnsNameComponent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('component', models.CharField(help_text='The component value of the name', max_length=50, unique=True, verbose_name='Dns Entry Component')),
                ('component_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.DnsNameComponentCategory', verbose_name='Dns Entry Component Category')),
                ('dns_pool_entries', models.ManyToManyField(blank=True, help_text='Dns Entries that contain this component value', to='app.DnsPoolEntry', verbose_name='Dns Entries')),
            ],
        ),
        migrations.AddField(
            model_name='dnsentry',
            name='subnet',
            field=models.ForeignKey(help_text='The subnet this ip address belongs to.', on_delete=django.db.models.deletion.CASCADE, to='app.Subnet', verbose_name='Dns Entry'),
        ),
    ]
