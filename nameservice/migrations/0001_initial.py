# Generated by Django 2.2 on 2019-04-29 20:23

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='NameEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
            ],
            options={
                'verbose_name_plural': 'Name Entries',
            },
        ),
        migrations.CreateModel(
            name='NamePoolEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('entries', models.ManyToManyField(blank=True, to='nameservice.NameEntry', verbose_name='Entries')),
            ],
            options={
                'verbose_name_plural': 'Name Pool Entries',
            },
        ),
        migrations.CreateModel(
            name='NamingArtifactsCriteria',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('criteria', models.CharField(help_text='The artifact criteria of the name', max_length=50)),
                ('default', models.CharField(blank=True, help_text='The default value for criteria', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='NamingScheme',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scheme', models.CharField(help_text="Concat the naming scheme using python format expression e.g ''{type}{farm}foo'", max_length=150, verbose_name='Name Scheme')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
            ],
        ),
        migrations.CreateModel(
            name='PoolType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
            ],
        ),
        migrations.CreateModel(
            name='NamingArtifacts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('artifact', models.CharField(help_text='The artifact value of the name', max_length=50, unique=True, verbose_name='NameEntry Component')),
                ('criteria', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nameservice.NamingArtifactsCriteria', verbose_name='NameEntry Criteria')),
                ('related_entries', models.ManyToManyField(blank=True, help_text=' Entries that contain this artifact', to='nameservice.NamePoolEntry', verbose_name='NameEntries')),
            ],
        ),
        migrations.AddField(
            model_name='namepoolentry',
            name='pool_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nameservice.PoolType', verbose_name='Name Pool Type'),
        ),
        migrations.CreateModel(
            name='NamePattern',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('regex', models.TextField(help_text='named group regex in python verbose expression', verbose_name='DNS Entry Name Pattern')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('criteria', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nameservice.PoolType', verbose_name='Pool Criteria')),
                ('schemes', models.ManyToManyField(blank=True, help_text='Ordered list of naming schemes', to='nameservice.NamingScheme', verbose_name='Naming Schemes')),
            ],
        ),
    ]
